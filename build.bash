#!/bin/bash

set -euo pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

DEBUG=${1:-1}

DEBUG_DONT_BLOCK_INPUT=1
DEBUG_FUNCTION_NAMES=1
DEBUG_MINIFY=1
DEBUG_MINIFY_SHADERS=0
NO_ROADROLLER=0

# Generate variables

echo '// This file is autogenerated' > ./src/autogenerated.ts

if [ $DEBUG -eq 1 ]; then
  echo 'export const DEBUG = true;' >> ./src/autogenerated.ts
else 
  echo 'export const DEBUG = false;' >> ./src/autogenerated.ts
fi

if [ $DEBUG -eq 1 ] && [ $DEBUG_DONT_BLOCK_INPUT -eq 1 ]; then
  echo 'export const DEBUG_DONT_BLOCK_INPUT = true;' >> ./src/autogenerated.ts
else 
  echo 'export const DEBUG_DONT_BLOCK_INPUT = false;'>> ./src/autogenerated.ts
fi

# Compile shaders

mkdir -p ./src/shaders
echo '' > ./src/shaders/bundle.ts

minifyShader() {
	cpp -P -E -undef "$1" > ./src/shaders/out

	#Using https://github.com/laurentlb/Shader_Minifier
	if [ $DEBUG -eq 0 ] || [ $DEBUG_MINIFY_SHADERS -eq 1 ]; then
		mono tools/glsl/shader_minifier.exe --no-sequence --aggressive-inlining --preserve-externals --format text -o - ./src/shaders/out > ./src/shaders/outMin	
	else 
	    cp ./src/shaders/out ./src/shaders/outMin
	fi

	echo "#version 300 es" > ./src/shaders/out
	echo "precision highp float;" >> ./src/shaders/out
	#echo "#define f_ float" >> ./src/shaders/out
	#echo "#define _2 vec2" >> ./src/shaders/out
	#echo "#define _3 vec3" >> ./src/shaders/out
	#echo "#define _4 else if" >> ./src/shaders/out
	#sed -e 's/float/f_/g' -e 's/vec2/_2/g' -e 's/vec3/_3/g' -e 's/else if/_4/g'  ./src/shaders/outMin >> ./src/shaders/out	
	
	cat ./src/shaders/outMin  >> ./src/shaders/out
	rm ./src/shaders/outMin

	ONLY_FN=${1##*/}
	{
		echo -n "export const ${ONLY_FN%.*}$2 = \`";
		cat ./src/shaders/out;
		echo '`;' 
	} >> ./src/shaders/bundle.ts

	rm ./src/shaders/out
}

for FN in ./src/shaders/*.vert
do 
	minifyShader "$FN" Vert
done

for FN in ./src/shaders/*.frag
do 
	minifyShader "$FN" Frag
done


# Lint

if [ $DEBUG -eq 0 ]; then
	npx tsc --noEmit --strict
fi

# Bundle

npx esbuild src/index.ts --format=iife --bundle  --outfile=dist/out.js

# The build of the editor

mkdir -p dist/viewer
cp src/viewer/index.html dist/viewer/
cp livejs/live.js dist/viewer/
npx esbuild src/viewer/viewer.ts --format=iife --bundle --outfile=dist/viewer/viewer.js

# ZeptoFM Playground

mkdir -p dist/zeptofm
cp src/zeptofm/playground.html dist/zeptofm/index.html
npx esbuild src/zeptofm/playground.ts --format=iife --bundle --outfile=dist/zeptofm/playground.js



# Minify
	
mkdir -p dist/entry
cd dist/entry

if [ $DEBUG -eq 0 ] || [ $DEBUG_MINIFY -eq 1 ]; then
	TERSER_EXTRA_OPTIONS='--compress drop_console,passes=3'

	if [ $DEBUG -eq 1 ]; then
		TERSER_EXTRA_OPTIONS='--source-map url=inline'

		if [ $DEBUG_FUNCTION_NAMES -eq 1 ]; then
			TERSER_EXTRA_OPTIONS="${TERSER_EXTRA_OPTIONS} --keep-fnames"
		fi 
	fi 

	npx terser ../out.js --ecma 2021 --mangle --toplevel --mangle-props keep_quoted ${TERSER_EXTRA_OPTIONS} -o out.js
else 
	npx terser ../out.js --comments false -o out.js
fi

# Todo: Drop const from shaders before this search and replace

#JS_CODE=$(sed 's/\bconst\b/let/g' < out.js | sed 's/\bvar\b/let/g')

if [ $DEBUG -eq 0 ] && [ $NO_ROADROLLER -eq 0 ]; then 
	ROADROLLER_REPLICATE_PARAMS='-Zab12 -Zlr930 -Zmc4 -Zpr15 -S0,1,2,3,6,13,25,41,50,101,170,263'
	#ROADROLLER_REPLICATE_PARAMS='-O2'
	npx roadroller ${ROADROLLER_REPLICATE_PARAMS} -t js out.js -o out.rr.js
	mv -f out.rr.js out.js
fi

JS_CODE=$(cat out.js)

printf '\xEF\xBB\xBF' > "index.html"	# A leading UTF-8 Byte Order Mark serves to identify the character encoding.

cat <<-EOF | tr -d '\n' >> "index.html"
	<!DOCTYPE html>
	<style>
	canvas {
	max-width: 100%;
    max-height: 100%;
    bottom: 0;
    left: 0;
    margin: auto;
    overflow: auto;
    position: fixed;
    right: 0;
    top: 0;
	width: 100%;
    object-fit: contain;
	}
	</style>
	<title>JS13K2023</title>
	<script>${JS_CODE}</script>
EOF


printf '\n' >> "index.html"	# Append a newline to make a POSIX‚Äêcompliant text file.

rm out.js


